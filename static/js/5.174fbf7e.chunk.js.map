{"version":3,"sources":["vars.ts","components/TextInput/TextInput.tsx","components/NotFound/NotFound.tsx","components/CommentsBlock/CommentsBlock.tsx","components/EventPage/EventPage.tsx"],"names":["SERVER_URL","theme","createMuiTheme","overrides","MuiTextField","root","backgroundColor","borderRadius","width","color","fontFamily","borderColor","React","memo","placeholder","handleChange","inputType","name","error","twoColumns","multiline","initialVal","style","gridColumnStart","gridColumnEnd","undefined","className","value","label","variant","type","onChange","Boolean","rows","ErrorScreen","errorMessage","history","useHistory","onClick","goBack","target","loadingMarginTop","user","useContext","UserContext","useState","profileComments","setProfileComments","fetching","setFetching","comment","setComment","useEffect","fetch","id","method","headers","then","r","json","data","containerHeight","spinnerSize","marginTop","length","map","index","key","to","senderID","senderName","content","event","display","alignItems","body","JSON","stringify","username","targetID","commentsClone","unshift","disabled","marginLeft","EventPage","eventID","userID","title","contact","description","country","city","creatorID","creatorName","setEvent","isEnrolled","setIsEndrolled","enrolledusers","includes"],"mappings":"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","file":"static/js/5.174fbf7e.chunk.js","sourcesContent":["export const SERVER_URL: string = 'https://find-party-api.herokuapp.com';\r\n","import React from 'react';\r\nimport './TextInput.scss';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\ninterface ITextInput {\r\n  placeholder: string;\r\n  handleChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  inputType?: string;\r\n  name?: string;\r\n  error?: string | null;\r\n  twoColumns?: boolean;\r\n  multiline?: number;\r\n  initialVal?: string;\r\n}\r\n\r\nconst theme = createMuiTheme({\r\n  overrides: {\r\n    MuiTextField: {\r\n      root: {\r\n        backgroundColor: '#2ba296',\r\n        borderRadius: '3px',\r\n        width: '100%',\r\n        '& *': {\r\n          color: 'rgba(255,255,255, 0.8)',\r\n          fontFamily: 'Roboto Mono'\r\n        },\r\n        '& .MuiInputLabel-shrink': {\r\n          color: 'rgb(140, 245, 154)',\r\n          fontFamily: 'Roboto Mono'\r\n        },\r\n        '& .MuiFilledInput-underline:after': {\r\n          borderColor: 'rgb(140, 245, 154)'\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nconst TextInput: React.FC<ITextInput> = ({\r\n  placeholder,\r\n  handleChange,\r\n  inputType = 'text',\r\n  name,\r\n  error,\r\n  twoColumns,\r\n  multiline,\r\n  initialVal\r\n}) => {\r\n  return (\r\n    <div style={twoColumns ? { gridColumnStart: '1', gridColumnEnd: '3' } : undefined}>\r\n      <div className=\"error\">{error ? error : null}</div>\r\n      <ThemeProvider theme={theme}>\r\n        <TextField\r\n          value={initialVal}\r\n          label={placeholder}\r\n          variant=\"filled\"\r\n          type={inputType}\r\n          onChange={handleChange}\r\n          name={name}\r\n          color=\"primary\"\r\n          multiline={Boolean(multiline)}\r\n          rows={multiline}\r\n        />\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(TextInput);\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { INotFound } from '../../types/types';\r\nimport './NotFound.scss';\r\n\r\nconst ErrorScreen: React.FC<INotFound> = ({ errorMessage }) => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div className=\"not_found_container\">\r\n      <span className=\"not_found_error\">{errorMessage}</span>\r\n      <span onClick={() => history.goBack()} className=\"not_found_go_home\">\r\n        Go back\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorScreen;\r\n","import React, { useEffect, useState, useContext, Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport TextInput from '../TextInput/TextInput';\r\nimport { UserContext } from '../../App';\r\nimport { TComment } from '../../types/types';\r\nimport Loading from '../Loading/Loading';\r\nimport './CommentBlock.scss';\r\nimport { SERVER_URL } from '../../vars';\r\n\r\ninterface ICommentBlockProps {\r\n  target: {\r\n    name: 'users' | 'events';\r\n    id: string;\r\n  };\r\n  loadingMarginTop?: string;\r\n}\r\n\r\nconst CommentsBlock: React.FC<ICommentBlockProps> = ({ target, loadingMarginTop }) => {\r\n  const user = useContext(UserContext);\r\n  const [profileComments, setProfileComments] = useState<Array<TComment>>([]);\r\n  const [fetching, setFetching] = useState(true);\r\n  const [comment, setComment] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetch(SERVER_URL + `/api/${target.name}/comments/${target.id}`, {\r\n      method: 'get',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    })\r\n      .then((r) => r.json())\r\n      .then((data) => {\r\n        setFetching(false);\r\n        setProfileComments(data);\r\n      });\r\n  }, [target]);\r\n\r\n  const handleSendComment = () => {\r\n    if (comment.length < 1) {\r\n      return;\r\n    }\r\n\r\n    fetch(SERVER_URL + `/api/${target.name}/comments/`, {\r\n      method: 'post',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        content: comment,\r\n        senderName: user.username,\r\n        senderID: user.id,\r\n        targetID: target.id\r\n      })\r\n    })\r\n      .then((r) => r.json())\r\n      .then((data) => {\r\n        const commentsClone = [...profileComments];\r\n        commentsClone.unshift({ senderName: user.username, content: comment, senderID: user.id });\r\n        setProfileComments(commentsClone);\r\n      });\r\n  };\r\n\r\n  if (fetching) {\r\n    return (\r\n      <Loading backgroundColor=\"transparent\" containerHeight=\"100%\" spinnerSize=\"50px\" marginTop={loadingMarginTop} />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"comments\">\r\n      <h4>Comments</h4>\r\n      <div className=\"comments_block\">\r\n        {profileComments.length < 1 ? (\r\n          <h1 className=\"no-comments\">No comments found</h1>\r\n        ) : (\r\n          <Fragment>\r\n            {profileComments.map((comment, index) => {\r\n              return (\r\n                <div className=\"comment\" key={index}>\r\n                  <div className=\"comment-content\">\r\n                    <Link to={`/users/${comment.senderID}`}>\r\n                      <h5>{comment.senderName}</h5>\r\n                    </Link>\r\n                    <p>{comment.content}</p>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </Fragment>\r\n        )}\r\n      </div>\r\n      {user.id ? (\r\n        <Fragment>\r\n          <TextInput placeholder=\"Write your comment...\" handleChange={(event) => setComment(event.target.value)} />\r\n          <div style={{ display: 'flex', alignItems: 'center', marginTop: '6px' }}>\r\n            <button className=\"comment-submit\" onClick={handleSendComment} disabled={comment.length > 265}>\r\n              Send\r\n            </button>\r\n            {comment.length > 265 ? (\r\n              <div className=\"error\" style={{ marginLeft: '10px' }}>\r\n                Max. comment length: 265.\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </Fragment>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(CommentsBlock);\r\n","import React, { useEffect, useState } from 'react';\r\nimport CommentsBlock from '../CommentsBlock/CommentsBlock';\r\nimport NotFound from '../NotFound/NotFound';\r\nimport './EventPage.scss';\r\nimport { SERVER_URL } from '../../vars';\r\nimport { IEventProps } from '../../types/types';\r\n\r\ninterface IEventState {\r\n  title: string;\r\n  contact: string;\r\n  description: string;\r\n  country: string;\r\n  city: string;\r\n  creatorID: string;\r\n  creatorName: string;\r\n  id: string;\r\n}\r\n\r\nconst EventPage: React.FC<IEventProps> = ({ eventID, userID }) => {\r\n  const [event, setEvent] = useState<IEventState>({\r\n    title: '',\r\n    contact: '',\r\n    description: '',\r\n    country: '',\r\n    city: '',\r\n    creatorID: '',\r\n    creatorName: '',\r\n    id: ''\r\n  });\r\n  const [isEnrolled, setIsEndrolled] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetch(SERVER_URL + `/api/events/info/${eventID}`, {\r\n      method: 'get',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    })\r\n      .then((r) => r.json())\r\n      .then((data) => {\r\n        if (data.enrolledusers.includes(userID)) {\r\n          setIsEndrolled(true);\r\n        }\r\n        setEvent(data);\r\n      });\r\n  }, [eventID, userID]);\r\n\r\n  const handleEnroll = () => {\r\n    fetch(SERVER_URL + `/api/events/enroll`, {\r\n      method: 'put',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        eventID: event.id,\r\n        userID: userID\r\n      })\r\n    })\r\n      .then((r) => r.json())\r\n      .then((data) => {\r\n        setIsEndrolled(true);\r\n      });\r\n  };\r\n\r\n  const { title, country, city, contact, description, creatorName } = event;\r\n\r\n  if (!title) {\r\n    return <NotFound errorMessage=\"Can't find this event!\" />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"eventPage-container\">\r\n      <div className=\"eventPage-box\">\r\n        <div className=\"box_head\">\r\n          <p>{contact}</p>\r\n          <div className=\"head_title-creator\">\r\n            <h2>{title}</h2>\r\n            <p>{creatorName}</p>\r\n          </div>\r\n          <p>\r\n            {country}, {city}\r\n          </p>\r\n        </div>\r\n        <div className=\"box_description\">{description}</div>\r\n        {userID ? (\r\n          <button className=\"submit-button box_enroll-button\" disabled={isEnrolled} onClick={handleEnroll}>\r\n            <span>{isEnrolled ? 'Already enrolled' : 'Enroll'}</span>\r\n          </button>\r\n        ) : null}\r\n        <CommentsBlock target={{ name: 'events', id: eventID }} loadingMarginTop=\"50px\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventPage;\r\n"],"sourceRoot":""}