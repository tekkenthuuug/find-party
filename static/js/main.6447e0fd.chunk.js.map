{"version":3,"sources":["components/Loading/Loading.tsx","components/SideBar/SideBar.tsx","components/TopBar/TopBar.tsx","components/Navigation/Navigation.tsx","ProtectedRoute.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Loading","backgroundColor","spinnerSize","containerHeight","marginTop","style","height","className","width","useStyles","makeStyles","list","paper","color","SideBar","userID","drawerOpened","toggleDrawer","classes","SideLinks","title","path","icon","Drawer","open","onClose","role","onClick","onKeyDown","List","map","item","to","key","activeStyle","ListItem","button","ListItemIcon","ListItemText","primary","theme","createStyles","menuButton","marginRight","spacing","flexGrow","TopBar","setUser","news","history","useHistory","handleClose","setAnchorEl","React","useState","anchorEl","Boolean","AppBar","position","variant","Toolbar","IconButton","edge","aria-label","Typography","aria-controls","aria-haspopup","event","currentTarget","Menu","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","MenuItem","component","Link","username","push","memo","setDrawerOpened","type","content","link","index","ProtectedRoute","Component","rest","render","props","pathname","state","from","location","HomePage","lazy","CreateEvent","EventPage","SettingPage","NotFound","Feed","UserProfile","Register","Login","initialUser","UserContext","createContext","App","user","basename","process","fallback","Provider","value","exact","match","eventID","params","errorMessage","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6447e0fd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Loading.scss';\r\n\r\ninterface ILoading {\r\n  backgroundColor?: string;\r\n  spinnerSize?: string;\r\n  containerHeight?: string;\r\n  marginTop?: string;\r\n}\r\n\r\nconst Loading: React.FC<ILoading> = ({\r\n  backgroundColor = '#1D1D21',\r\n  spinnerSize = '100px',\r\n  containerHeight = '100vh',\r\n  marginTop = '0'\r\n}) => {\r\n  return (\r\n    <div style={{ backgroundColor, height: containerHeight }} className=\"loading-screen\">\r\n      <div className=\"spin\" style={{ width: spinnerSize, height: spinnerSize, marginTop }}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Drawer, List, ListItem, ListItemText } from '@material-ui/core';\r\nimport DynamicFeedIcon from '@material-ui/icons/DynamicFeed';\r\nimport SettingsApplicationsRoundedIcon from '@material-ui/icons/SettingsApplicationsRounded';\r\nimport AccountCircleRoundedIcon from '@material-ui/icons/AccountCircleRounded';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport { ILink } from '../../types/types';\r\n\r\ninterface IDrawer {\r\n  userID: string;\r\n  drawerOpened: boolean;\r\n  toggleDrawer: (\r\n    open: boolean\r\n  ) => (event: React.KeyboardEvent<Element> | React.MouseEvent<Element, MouseEvent>) => void;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250\r\n  },\r\n  paper: {\r\n    backgroundColor: 'rgb(52, 52, 61)',\r\n    color: 'white'\r\n  }\r\n});\r\n\r\nconst SideBar: React.FC<IDrawer> = ({ userID, drawerOpened, toggleDrawer }) => {\r\n  const classes = useStyles();\r\n\r\n  const SideLinks: Array<ILink> = [\r\n    {\r\n      title: 'My profile',\r\n      path: '/users/' + userID,\r\n      icon: <AccountCircleRoundedIcon style={{ color: 'white' }} />\r\n    },\r\n    { title: 'Feed', path: '/feed', icon: <DynamicFeedIcon style={{ color: 'white' }} /> },\r\n    { title: 'Create event', path: '/events/create', icon: <AddCircleIcon style={{ color: 'white' }} /> },\r\n    { title: 'Settings', path: '/settings', icon: <SettingsApplicationsRoundedIcon style={{ color: 'white' }} /> }\r\n  ];\r\n\r\n  const sideList = () => (\r\n    <div className={classes.list} role=\"presentation\" onClick={toggleDrawer(false)} onKeyDown={toggleDrawer(false)}>\r\n      <List>\r\n        {SideLinks.map((item) => (\r\n          <NavLink to={item.path} key={item.title} activeStyle={{ color: '#b1b1c7' }}>\r\n            <ListItem button>\r\n              <ListItemIcon>{item.icon}</ListItemIcon>\r\n              <ListItemText primary={item.title} />\r\n            </ListItem>\r\n          </NavLink>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Drawer open={drawerOpened} onClose={toggleDrawer(false)} classes={{ paper: classes.paper }}>\r\n      {sideList()}\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","import React from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { AppBar, Toolbar, Typography, IconButton, MenuItem, Menu } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    menuButton: {\r\n      marginRight: theme.spacing(2)\r\n    },\r\n    title: {\r\n      flexGrow: 1\r\n    }\r\n  })\r\n);\r\n\r\ninterface ITopBar {\r\n  setUser: ({ username, id }: { username: string; id: string }) => void;\r\n  userID: string;\r\n  toggleDrawer: (\r\n    open: boolean\r\n  ) => (event: React.KeyboardEvent<Element> | React.MouseEvent<Element, MouseEvent>) => void;\r\n  news?: string;\r\n}\r\n\r\nconst TopBar: React.FC<ITopBar> = ({ setUser, toggleDrawer, userID, news = '' }) => {\r\n  const history = useHistory();\r\n\r\n  const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleLogOut = () => {\r\n    handleClose();\r\n    setUser({\r\n      username: '',\r\n      id: ''\r\n    });\r\n    history.push('/login');\r\n  };\r\n\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  return (\r\n    <AppBar position=\"absolute\" style={{ backgroundColor: 'rgb(52, 52, 61)' }} variant=\"outlined\">\r\n      <Toolbar>\r\n        <IconButton\r\n          edge=\"start\"\r\n          className={classes.menuButton}\r\n          color=\"inherit\"\r\n          aria-label=\"menu\"\r\n          onClick={toggleDrawer(true)}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          {news}\r\n        </Typography>\r\n        <div>\r\n          <IconButton\r\n            aria-label=\"account of current user\"\r\n            aria-controls=\"menu-appbar\"\r\n            aria-haspopup=\"true\"\r\n            onClick={handleMenu}\r\n            color=\"inherit\"\r\n          >\r\n            <AccountCircle />\r\n          </IconButton>\r\n          <Menu\r\n            id=\"menu-appbar\"\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right'\r\n            }}\r\n            keepMounted\r\n            transformOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right'\r\n            }}\r\n            open={open}\r\n            onClose={handleClose}\r\n          >\r\n            <MenuItem onClick={handleClose} component={Link} to={'/users/' + userID}>\r\n              Profile\r\n            </MenuItem>\r\n            <MenuItem onClick={handleLogOut}>Sign out</MenuItem>\r\n          </Menu>\r\n        </div>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default TopBar;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Navigation.scss';\r\nimport SideBar from '../SideBar/SideBar';\r\nimport TopBar from '../TopBar/TopBar';\r\n\r\ninterface INavigation {\r\n  userID: string;\r\n  setUser: ({ username, id }: { username: string; id: string }) => void;\r\n}\r\n\r\nconst Navigation: React.FC<INavigation> = ({ userID, setUser }) => {\r\n  const [drawerOpened, setDrawerOpened] = React.useState(false);\r\n\r\n  const toggleDrawer = (open: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\r\n    if (\r\n      event.type === 'keydown' &&\r\n      ((event as React.KeyboardEvent).key === 'Tab' || (event as React.KeyboardEvent).key === 'Shift')\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setDrawerOpened(open);\r\n  };\r\n\r\n  return userID ? (\r\n    <div style={{ flexGrow: 1 }}>\r\n      <SideBar userID={userID} drawerOpened={drawerOpened} toggleDrawer={toggleDrawer} />\r\n      <TopBar userID={userID} setUser={setUser} toggleDrawer={toggleDrawer} />\r\n    </div>\r\n  ) : (\r\n    <nav>\r\n      <div className=\"nav__account\">\r\n        {[\r\n          { path: '/register', content: 'Register' },\r\n          { path: '/login', content: 'Sign in' }\r\n        ].map((link, index) => {\r\n          return (\r\n            <Link to={link.path} key={index}>\r\n              <div>{link.content}</div>\r\n            </Link>\r\n          );\r\n        })}\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default React.memo(Navigation);\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\ninterface IProtectedRoute {\r\n  component: React.ElementType;\r\n  exact: boolean;\r\n  path: string;\r\n  userID: string;\r\n  rest?: any;\r\n}\r\n\r\nconst ProtectedRoute: React.FC<IProtectedRoute> = ({ userID, component: Component, ...rest }) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        if (userID) {\r\n          return <Component {...props} userID={userID} />;\r\n        } else {\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: '/login',\r\n                state: {\r\n                  from: props.location\r\n                }\r\n              }}\r\n            />\r\n          );\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProtectedRoute;\r\n","import React, { lazy, Suspense, useState, createContext } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n// Importing interfaces\nimport { IFormProps, IUserProfileProps, INotFound, IAuthUser, IEventProps } from './types/types';\n// Importing components\nimport Navigation from './components/Navigation/Navigation';\nimport Loading from './components/Loading/Loading';\nimport ProtectedRoute from './ProtectedRoute';\n\nconst HomePage: React.FC = lazy(() => import('./components/HomePage/HomePage'));\nconst CreateEvent: React.FC = lazy(() => import('./containers/CreateEvent/CreateEvent'));\nconst EventPage: React.FC<IEventProps> = lazy(() => import('./components/EventPage/EventPage'));\nconst SettingPage: React.FC<{ userID: string }> = lazy(() => import('./containers/SettingsPage/SettingsPage'));\nconst NotFound: React.FC<INotFound> = lazy(() => import('./components/NotFound/NotFound'));\nconst Feed: React.FC = lazy(() => import('./containers/Feed/Feed'));\nconst UserProfile: React.FC<IUserProfileProps> = lazy(() => import('./containers/UserProfile/UserProfile'));\nconst Register: React.FC<IFormProps> = lazy(() => import('./containers/Register/Register'));\nconst Login: React.FC<IFormProps> = lazy(() => import('./containers/Login/Login'));\n\nconst initialUser = {\n  id: '',\n  username: ''\n};\n\nexport const UserContext = createContext(initialUser);\n\nconst App: React.FC = () => {\n  const [user, setUser] = useState<IAuthUser>(initialUser);\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Navigation userID={user.id} setUser={setUser} />\n      <Suspense fallback={<Loading />}>\n        <UserContext.Provider value={user}>\n          <Switch>\n            <Route exact path=\"/\" component={HomePage} />\n            <Route exact path=\"/register\" render={(props) => <Register {...props} setUser={setUser} user={user} />} />\n            <Route exact path=\"/login\" render={(props) => <Login {...props} setUser={setUser} user={user} />} />\n            <ProtectedRoute exact path=\"/feed\" component={Feed} userID={user.id} />\n            <ProtectedRoute exact path=\"/events/create\" component={CreateEvent} userID={user.id} />\n            <ProtectedRoute exact path=\"/settings\" component={SettingPage} userID={user.id} />\n            <Route\n              exact\n              path=\"/events/:id\"\n              render={({ match }) => <EventPage eventID={match.params.id} userID={user.id} />}\n            />\n            <Route\n              exact\n              path=\"/users/:id\"\n              render={({ match }) => <UserProfile userID={match.params.id} user={user} />}\n            />\n            {/* \"not found\" route */}\n            <Route exact path=\"*\" render={() => <NotFound errorMessage=\"Ooops... 404 NOT FOUND\" />} />\n          </Switch>\n        </UserContext.Provider>\n      </Suspense>\n    </BrowserRouter>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}