{"version":3,"sources":["vars.ts","components/TextInput/TextInput.tsx","components/Form/Form.tsx","containers/CreateEvent/CreateEvent.tsx"],"names":["SERVER_URL","theme","createMuiTheme","overrides","MuiTextField","root","backgroundColor","borderRadius","width","color","fontFamily","borderColor","React","memo","placeholder","handleChange","inputType","name","error","twoColumns","multiline","initialVal","style","gridColumnStart","gridColumnEnd","undefined","className","value","label","variant","type","onChange","Boolean","rows","Form","headTitle","formik","sections","submitButtonText","subTitle","onSubmit","handleSubmit","values","map","section","index","key","title","fields","field","errors","disabled","isSubmitting","isValidating","animation","CreateEvent","user","useContext","UserContext","history","useHistory","useFormik","initialValues","contact","description","country","city","validate","length","setSubmitting","fetch","method","headers","body","JSON","stringify","creatorID","id","creatorName","username","then","r","json","data","push"],"mappings":"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","file":"static/js/9.87b898e6.chunk.js","sourcesContent":["export const SERVER_URL: string = 'https://find-party-api.herokuapp.com';\r\n","import React from 'react';\r\nimport './TextInput.scss';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\ninterface ITextInput {\r\n  placeholder: string;\r\n  handleChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  inputType?: string;\r\n  name?: string;\r\n  error?: string | null;\r\n  twoColumns?: boolean;\r\n  multiline?: number;\r\n  initialVal?: string;\r\n}\r\n\r\nconst theme = createMuiTheme({\r\n  overrides: {\r\n    MuiTextField: {\r\n      root: {\r\n        backgroundColor: '#2ba296',\r\n        borderRadius: '3px',\r\n        width: '100%',\r\n        '& *': {\r\n          color: 'rgba(255,255,255, 0.8)',\r\n          fontFamily: 'Roboto Mono'\r\n        },\r\n        '& .MuiInputLabel-shrink': {\r\n          color: 'rgb(140, 245, 154)',\r\n          fontFamily: 'Roboto Mono'\r\n        },\r\n        '& .MuiFilledInput-underline:after': {\r\n          borderColor: 'rgb(140, 245, 154)'\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nconst TextInput: React.FC<ITextInput> = ({\r\n  placeholder,\r\n  handleChange,\r\n  inputType = 'text',\r\n  name,\r\n  error,\r\n  twoColumns,\r\n  multiline,\r\n  initialVal\r\n}) => {\r\n  return (\r\n    <div style={twoColumns ? { gridColumnStart: '1', gridColumnEnd: '3' } : undefined}>\r\n      <div className=\"error\">{error ? error : null}</div>\r\n      <ThemeProvider theme={theme}>\r\n        <TextField\r\n          value={initialVal}\r\n          label={placeholder}\r\n          variant=\"filled\"\r\n          type={inputType}\r\n          onChange={handleChange}\r\n          name={name}\r\n          color=\"primary\"\r\n          multiline={Boolean(multiline)}\r\n          rows={multiline}\r\n        />\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(TextInput);\r\n","import React, { Fragment } from 'react';\r\nimport TextInput from '../TextInput/TextInput';\r\nimport CachedRoundedIcon from '@material-ui/icons/CachedRounded';\r\nimport ArrowRightAltRoundedIcon from '@material-ui/icons/ArrowRightAltRounded';\r\nimport { FormikValues } from 'formik';\r\nimport { Section } from '../../types/types';\r\nimport './Form.scss';\r\n\r\ninterface IForm {\r\n  headTitle: string;\r\n  subTitle?: string | JSX.Element;\r\n  sections: Section[];\r\n  submitButtonText: string;\r\n  formik: FormikValues;\r\n}\r\n\r\nconst Form: React.FC<IForm> = ({ headTitle, formik, sections, submitButtonText, subTitle }) => {\r\n  return (\r\n    <div className=\"form-container\">\r\n      <div className=\"form-box\">\r\n        <h1>{headTitle}</h1>\r\n        {subTitle ? <p>{subTitle}</p> : null}\r\n        <form onSubmit={formik.handleSubmit} className=\"form\">\r\n          {formik.values.error ? <div className=\"form-error\">{formik.values.error}</div> : null}\r\n          {sections.map((section, index) => {\r\n            return (\r\n              <Fragment key={index}>\r\n                {section.title ? <h2>{section.title}</h2> : null}\r\n                <div className=\"input-section\">\r\n                  {section.fields.map((field) => {\r\n                    return (\r\n                      <TextInput\r\n                        key={field.name}\r\n                        inputType={field.type}\r\n                        initialVal={formik.values[field.name]}\r\n                        placeholder={field.placeholder}\r\n                        handleChange={formik.handleChange}\r\n                        name={field.name}\r\n                        error={formik.errors[field.name] || null}\r\n                        twoColumns={field.twoColumns}\r\n                        multiline={field.multiline}\r\n                      />\r\n                    );\r\n                  })}\r\n                </div>\r\n              </Fragment>\r\n            );\r\n          })}\r\n          <button className=\"submit-button\" type=\"submit\" disabled={formik.isSubmitting}>\r\n            <span>{submitButtonText}</span>\r\n            {formik.isSubmitting || formik.isValidating ? (\r\n              <CachedRoundedIcon style={{ animation: 'spin 1s linear infinite' }} />\r\n            ) : (\r\n              <ArrowRightAltRoundedIcon />\r\n            )}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useContext } from 'react';\r\nimport Form from '../../components/Form/Form';\r\nimport { Section, IBaseValidation } from '../../types/types';\r\nimport { useFormik } from 'formik';\r\nimport { UserContext } from '../../App';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { SERVER_URL } from '../../vars';\r\n\r\nconst sections: Section[] = [\r\n  {\r\n    title: 'Main information',\r\n    fields: [\r\n      { placeholder: 'Event title', name: 'title' },\r\n      { placeholder: 'Contact', name: 'contact' }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Additional info',\r\n    fields: [{ placeholder: 'Event description', name: 'description', twoColumns: true, multiline: 6 }]\r\n  },\r\n  {\r\n    title: 'Location information',\r\n    fields: [\r\n      { placeholder: 'Country', name: 'country' },\r\n      { placeholder: 'City', name: 'city' }\r\n    ]\r\n  }\r\n];\r\n\r\nconst validate = ({ title, contact, country, city, description }: IBaseValidation) => {\r\n  const errors = {\r\n    title: '',\r\n    contact: '',\r\n    country: '',\r\n    city: '',\r\n    description: ''\r\n  };\r\n\r\n  if (description.length > 265) {\r\n    errors.description = 'Length must be 265 characters or less';\r\n  } else {\r\n    delete errors.description;\r\n  }\r\n\r\n  if (!title) {\r\n    errors.title = 'Required field';\r\n  } else if (title.length < 5) {\r\n    errors.title = 'Length must be at least 5 characters';\r\n  } else if (title.length > 24) {\r\n    errors.title = 'Length must be 24 characters or less';\r\n  } else {\r\n    delete errors.title;\r\n  }\r\n\r\n  if (!contact) {\r\n    errors.contact = 'Required field';\r\n  } else if (contact.length < 5) {\r\n    errors.contact = 'Length must be at least 5 characters';\r\n  } else if (contact.length > 24) {\r\n    errors.contact = 'Length must be 24 characters or less';\r\n  } else {\r\n    delete errors.contact;\r\n  }\r\n\r\n  if (!country) {\r\n    errors.country = 'Required field';\r\n  } else if (country.length > 24) {\r\n    errors.country = 'Length must be 24 characters or less';\r\n  } else {\r\n    delete errors.country;\r\n  }\r\n\r\n  if (!city) {\r\n    errors.city = 'Required field';\r\n  } else if (city.length > 24) {\r\n    errors.city = 'Length must be 24 characters or less';\r\n  } else {\r\n    delete errors.city;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nconst CreateEvent: React.FC = () => {\r\n  const user = useContext(UserContext);\r\n  const history = useHistory();\r\n  const formik = useFormik<IBaseValidation>({\r\n    initialValues: {\r\n      title: '',\r\n      contact: '',\r\n      description: '',\r\n      country: '',\r\n      city: ''\r\n    },\r\n    validate: (values) => validate(values),\r\n    onSubmit: ({ title, contact, description, country, city }, { setSubmitting }) => {\r\n      fetch(SERVER_URL + '/api/events/create', {\r\n        method: 'post',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          title,\r\n          contact,\r\n          country,\r\n          city,\r\n          description,\r\n          creatorID: user.id,\r\n          creatorName: user.username\r\n        })\r\n      })\r\n        .then((r) => r.json())\r\n        .then((data) => {\r\n          setSubmitting(false);\r\n          history.push(`/events/${data}`);\r\n        });\r\n    }\r\n  });\r\n  return <Form formik={formik} headTitle=\"Create your own event!\" submitButtonText=\"Create\" sections={sections} />;\r\n};\r\n\r\nexport default CreateEvent;\r\n"],"sourceRoot":""}