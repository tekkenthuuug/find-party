{"version":3,"sources":["vars.ts","components/TextInput/TextInput.tsx","components/Form/Form.tsx","containers/SettingsPage/SettingsPage.tsx"],"names":["SERVER_URL","theme","createMuiTheme","overrides","MuiTextField","root","backgroundColor","borderRadius","width","color","fontFamily","borderColor","React","memo","placeholder","handleChange","inputType","name","error","twoColumns","multiline","initialVal","style","gridColumnStart","gridColumnEnd","undefined","className","value","label","variant","type","onChange","Boolean","rows","Form","headTitle","formik","sections","submitButtonText","subTitle","onSubmit","handleSubmit","values","map","section","index","key","title","fields","field","errors","disabled","isSubmitting","isValidating","animation","SettingsPage","userID","useFormik","initialValues","description","validate","length","setSubmitting","fetch","method","headers","body","JSON","stringify","then","r","json","data","useEffect","setValues"],"mappings":"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","file":"static/js/10.d009f90a.chunk.js","sourcesContent":["export const SERVER_URL: string = 'https://find-party-api.herokuapp.com';\r\n","import React from 'react';\r\nimport './TextInput.scss';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\ninterface ITextInput {\r\n  placeholder: string;\r\n  handleChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  inputType?: string;\r\n  name?: string;\r\n  error?: string | null;\r\n  twoColumns?: boolean;\r\n  multiline?: number;\r\n  initialVal?: string;\r\n}\r\n\r\nconst theme = createMuiTheme({\r\n  overrides: {\r\n    MuiTextField: {\r\n      root: {\r\n        backgroundColor: '#2ba296',\r\n        borderRadius: '3px',\r\n        width: '100%',\r\n        '& *': {\r\n          color: 'rgba(255,255,255, 0.8)',\r\n          fontFamily: 'Roboto Mono'\r\n        },\r\n        '& .MuiInputLabel-shrink': {\r\n          color: 'rgb(140, 245, 154)',\r\n          fontFamily: 'Roboto Mono'\r\n        },\r\n        '& .MuiFilledInput-underline:after': {\r\n          borderColor: 'rgb(140, 245, 154)'\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nconst TextInput: React.FC<ITextInput> = ({\r\n  placeholder,\r\n  handleChange,\r\n  inputType = 'text',\r\n  name,\r\n  error,\r\n  twoColumns,\r\n  multiline,\r\n  initialVal\r\n}) => {\r\n  return (\r\n    <div style={twoColumns ? { gridColumnStart: '1', gridColumnEnd: '3' } : undefined}>\r\n      <div className=\"error\">{error ? error : null}</div>\r\n      <ThemeProvider theme={theme}>\r\n        <TextField\r\n          value={initialVal}\r\n          label={placeholder}\r\n          variant=\"filled\"\r\n          type={inputType}\r\n          onChange={handleChange}\r\n          name={name}\r\n          color=\"primary\"\r\n          multiline={Boolean(multiline)}\r\n          rows={multiline}\r\n        />\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(TextInput);\r\n","import React, { Fragment } from 'react';\r\nimport TextInput from '../TextInput/TextInput';\r\nimport CachedRoundedIcon from '@material-ui/icons/CachedRounded';\r\nimport ArrowRightAltRoundedIcon from '@material-ui/icons/ArrowRightAltRounded';\r\nimport { FormikValues } from 'formik';\r\nimport { Section } from '../../types/types';\r\nimport './Form.scss';\r\n\r\ninterface IForm {\r\n  headTitle: string;\r\n  subTitle?: string | JSX.Element;\r\n  sections: Section[];\r\n  submitButtonText: string;\r\n  formik: FormikValues;\r\n}\r\n\r\nconst Form: React.FC<IForm> = ({ headTitle, formik, sections, submitButtonText, subTitle }) => {\r\n  return (\r\n    <div className=\"form-container\">\r\n      <div className=\"form-box\">\r\n        <h1>{headTitle}</h1>\r\n        {subTitle ? <p>{subTitle}</p> : null}\r\n        <form onSubmit={formik.handleSubmit} className=\"form\">\r\n          {formik.values.error ? <div className=\"form-error\">{formik.values.error}</div> : null}\r\n          {sections.map((section, index) => {\r\n            return (\r\n              <Fragment key={index}>\r\n                {section.title ? <h2>{section.title}</h2> : null}\r\n                <div className=\"input-section\">\r\n                  {section.fields.map((field) => {\r\n                    return (\r\n                      <TextInput\r\n                        key={field.name}\r\n                        inputType={field.type}\r\n                        initialVal={formik.values[field.name]}\r\n                        placeholder={field.placeholder}\r\n                        handleChange={formik.handleChange}\r\n                        name={field.name}\r\n                        error={formik.errors[field.name] || null}\r\n                        twoColumns={field.twoColumns}\r\n                        multiline={field.multiline}\r\n                      />\r\n                    );\r\n                  })}\r\n                </div>\r\n              </Fragment>\r\n            );\r\n          })}\r\n          <button className=\"submit-button\" type=\"submit\" disabled={formik.isSubmitting}>\r\n            <span>{submitButtonText}</span>\r\n            {formik.isSubmitting || formik.isValidating ? (\r\n              <CachedRoundedIcon style={{ animation: 'spin 1s linear infinite' }} />\r\n            ) : (\r\n              <ArrowRightAltRoundedIcon />\r\n            )}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useEffect } from 'react';\r\nimport Form from '../../components/Form/Form';\r\nimport { useFormik } from 'formik';\r\nimport { Section, IBaseValidation } from '../../types/types';\r\nimport { SERVER_URL } from '../../vars';\r\n\r\nconst sections: Section[] = [\r\n  {\r\n    fields: [{ placeholder: 'Description', name: 'description', twoColumns: true, multiline: 6 }]\r\n  }\r\n];\r\n\r\nconst validate = (values: IBaseValidation) => {\r\n  const errors = {\r\n    description: ''\r\n  };\r\n  const { description } = values;\r\n  if (description.length > 265) {\r\n    errors.description = 'Description length must be 265 or less characters';\r\n  } else {\r\n    delete errors.description;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nconst SettingsPage: React.FC<{ userID: string }> = ({ userID }) => {\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      description: ''\r\n    },\r\n    validate: (values) => validate(values),\r\n    onSubmit: ({ description }, { setSubmitting }) => {\r\n      fetch(SERVER_URL + `/api/users/settings`, {\r\n        method: 'put',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          userID,\r\n          description\r\n        })\r\n      })\r\n        .then((r) => r.json())\r\n        .then((data) => {\r\n          setSubmitting(false);\r\n        });\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetch(SERVER_URL + `/api/users/${userID}`, {\r\n      method: 'get',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    })\r\n      .then((r) => r.json())\r\n      .then(({ description }) => {\r\n        formik.setValues({ description });\r\n      });\r\n    // eslint-disable-next-line\r\n  }, [userID]);\r\n\r\n  return <Form headTitle=\"Profile settings\" sections={sections} submitButtonText={'Apply'} formik={formik} />;\r\n};\r\n\r\nexport default SettingsPage;\r\n"],"sourceRoot":""}