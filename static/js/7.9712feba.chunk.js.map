{"version":3,"sources":["vars.ts","components/TextInput/TextInput.tsx","components/Form/Form.tsx","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","containers/Register/Register.tsx","containers/Login/Login.tsx"],"names":["SERVER_URL","theme","createMuiTheme","overrides","MuiTextField","root","backgroundColor","borderRadius","width","color","fontFamily","borderColor","React","memo","placeholder","handleChange","inputType","name","error","twoColumns","multiline","initialVal","style","gridColumnStart","gridColumnEnd","undefined","className","value","label","variant","type","onChange","Boolean","rows","Form","headTitle","formik","sections","submitButtonText","subTitle","onSubmit","handleSubmit","values","map","section","index","key","title","fields","field","errors","disabled","isSubmitting","isValidating","animation","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","validateBase","username","password","user","setUser","location","useFormik","initialValues","firstName","lastName","city","country","validate","props","setSubmitting","setValues","fetch","method","headers","body","JSON","stringify","then","r","json","data","id","details","to","pathname","state","from","catch"],"mappings":"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","file":"static/js/7.9712feba.chunk.js","sourcesContent":["export const SERVER_URL: string = 'https://find-party-api.herokuapp.com';\r\n","import React from 'react';\r\nimport './TextInput.scss';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\ninterface ITextInput {\r\n  placeholder: string;\r\n  handleChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  inputType?: string;\r\n  name?: string;\r\n  error?: string | null;\r\n  twoColumns?: boolean;\r\n  multiline?: number;\r\n  initialVal?: string;\r\n}\r\n\r\nconst theme = createMuiTheme({\r\n  overrides: {\r\n    MuiTextField: {\r\n      root: {\r\n        backgroundColor: '#2ba296',\r\n        borderRadius: '3px',\r\n        width: '100%',\r\n        '& *': {\r\n          color: 'rgba(255,255,255, 0.8)',\r\n          fontFamily: 'Roboto Mono'\r\n        },\r\n        '& .MuiInputLabel-shrink': {\r\n          color: 'rgb(140, 245, 154)',\r\n          fontFamily: 'Roboto Mono'\r\n        },\r\n        '& .MuiFilledInput-underline:after': {\r\n          borderColor: 'rgb(140, 245, 154)'\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nconst TextInput: React.FC<ITextInput> = ({\r\n  placeholder,\r\n  handleChange,\r\n  inputType = 'text',\r\n  name,\r\n  error,\r\n  twoColumns,\r\n  multiline,\r\n  initialVal\r\n}) => {\r\n  return (\r\n    <div style={twoColumns ? { gridColumnStart: '1', gridColumnEnd: '3' } : undefined}>\r\n      <div className=\"error\">{error ? error : null}</div>\r\n      <ThemeProvider theme={theme}>\r\n        <TextField\r\n          value={initialVal}\r\n          label={placeholder}\r\n          variant=\"filled\"\r\n          type={inputType}\r\n          onChange={handleChange}\r\n          name={name}\r\n          color=\"primary\"\r\n          multiline={Boolean(multiline)}\r\n          rows={multiline}\r\n        />\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(TextInput);\r\n","import React, { Fragment } from 'react';\r\nimport TextInput from '../TextInput/TextInput';\r\nimport CachedRoundedIcon from '@material-ui/icons/CachedRounded';\r\nimport ArrowRightAltRoundedIcon from '@material-ui/icons/ArrowRightAltRounded';\r\nimport { FormikValues } from 'formik';\r\nimport { Section } from '../../types/types';\r\nimport './Form.scss';\r\n\r\ninterface IForm {\r\n  headTitle: string;\r\n  subTitle?: string | JSX.Element;\r\n  sections: Section[];\r\n  submitButtonText: string;\r\n  formik: FormikValues;\r\n}\r\n\r\nconst Form: React.FC<IForm> = ({ headTitle, formik, sections, submitButtonText, subTitle }) => {\r\n  return (\r\n    <div className=\"form-container\">\r\n      <div className=\"form-box\">\r\n        <h1>{headTitle}</h1>\r\n        {subTitle ? <p>{subTitle}</p> : null}\r\n        <form onSubmit={formik.handleSubmit} className=\"form\">\r\n          {formik.values.error ? <div className=\"form-error\">{formik.values.error}</div> : null}\r\n          {sections.map((section, index) => {\r\n            return (\r\n              <Fragment key={index}>\r\n                {section.title ? <h2>{section.title}</h2> : null}\r\n                <div className=\"input-section\">\r\n                  {section.fields.map((field) => {\r\n                    return (\r\n                      <TextInput\r\n                        key={field.name}\r\n                        inputType={field.type}\r\n                        initialVal={formik.values[field.name]}\r\n                        placeholder={field.placeholder}\r\n                        handleChange={formik.handleChange}\r\n                        name={field.name}\r\n                        error={formik.errors[field.name] || null}\r\n                        twoColumns={field.twoColumns}\r\n                        multiline={field.multiline}\r\n                      />\r\n                    );\r\n                  })}\r\n                </div>\r\n              </Fragment>\r\n            );\r\n          })}\r\n          <button className=\"submit-button\" type=\"submit\" disabled={formik.isSubmitting}>\r\n            <span>{submitButtonText}</span>\r\n            {formik.isSubmitting || formik.isValidating ? (\r\n              <CachedRoundedIcon style={{ animation: 'spin 1s linear infinite' }} />\r\n            ) : (\r\n              <ArrowRightAltRoundedIcon />\r\n            )}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import React, { Fragment } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { useFormik } from 'formik';\r\nimport { IBaseValidation, IFormProps, Section } from '../../types/types';\r\nimport Form from '../../components/Form/Form';\r\nimport { SERVER_URL } from '../../vars';\r\n\r\nexport const validateBase = ({ username, password }: IBaseValidation) => {\r\n  const errors: IBaseValidation = {\r\n    username: '',\r\n    password: ''\r\n  };\r\n  if (!username) {\r\n    errors.username = 'Required field';\r\n  } else if (username.length < 5) {\r\n    errors.username = 'Length must be at least 5 characters';\r\n  } else if (username.length > 24) {\r\n    errors.username = 'Length must be 24 characters or less';\r\n  } else {\r\n    delete errors.username;\r\n  }\r\n\r\n  if (!password) {\r\n    errors.password = 'Required field';\r\n  } else if (password.length < 6) {\r\n    errors.password = 'Length must be at least 6 characters';\r\n  } else {\r\n    delete errors.password;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nconst sections: Section[] = [\r\n  {\r\n    title: 'Login information',\r\n    fields: [\r\n      { placeholder: 'Username', name: 'username' },\r\n      { placeholder: 'Password', name: 'password', type: 'password' }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Location information',\r\n    fields: [\r\n      { placeholder: 'Country', name: 'country' },\r\n      { placeholder: 'City', name: 'city' }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Personal information',\r\n    fields: [\r\n      { placeholder: 'First Name', name: 'firstName' },\r\n      { placeholder: 'Last Name', name: 'lastName' }\r\n    ]\r\n  }\r\n];\r\n\r\nconst Register: React.FC<IFormProps> = ({ user, setUser, location }) => {\r\n  const formik = useFormik<IBaseValidation>({\r\n    initialValues: {\r\n      firstName: '',\r\n      lastName: '',\r\n      username: '',\r\n      password: '',\r\n      city: '',\r\n      country: '',\r\n      error: ''\r\n    },\r\n    validate: (values) => validateBase(values),\r\n    onSubmit: (props, { setSubmitting, setValues }) => {\r\n      const { username, country, city, password, firstName, lastName } = props;\r\n      fetch(SERVER_URL + '/api/register', {\r\n        method: 'post',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          username,\r\n          password,\r\n          country,\r\n          city,\r\n          firstName,\r\n          lastName\r\n        })\r\n      })\r\n        .then((r) => r.json())\r\n        .then((data) => {\r\n          if (data.id) {\r\n            setUser({ id: data.id, username: data.username });\r\n          } else if (data.error) {\r\n            setSubmitting(false);\r\n            setValues({ ...props, error: data.error.details });\r\n          }\r\n        });\r\n    }\r\n  });\r\n\r\n  if (user.id) {\r\n    return <Redirect to={{ pathname: `/users/${user.id}`, state: { from: location } }} />;\r\n  }\r\n\r\n  return (\r\n    <Form\r\n      formik={formik}\r\n      headTitle=\"Join us now!\"\r\n      submitButtonText=\"Register\"\r\n      subTitle={\r\n        <Fragment>\r\n          Already registered?{' '}\r\n          <Link to=\"/login\">\r\n            <span>Sign in!</span>\r\n          </Link>\r\n        </Fragment>\r\n      }\r\n      sections={sections}\r\n    />\r\n  );\r\n};\r\n\r\nexport default React.memo(Register);\r\n","import React, { Fragment } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { useFormik } from 'formik';\r\nimport Form from '../../components/Form/Form';\r\nimport { IFormProps, Section, IBaseValidation } from '../../types/types';\r\nimport { SERVER_URL } from '../../vars';\r\nimport '../../components/Form/Form.scss';\r\n\r\n// Importing validtion method\r\nimport { validateBase } from '../Register/Register';\r\n\r\nconst sections: Section[] = [\r\n  {\r\n    fields: [\r\n      { placeholder: 'Username', name: 'username' },\r\n      { placeholder: 'Password', name: 'password', type: 'password' }\r\n    ]\r\n  }\r\n];\r\n\r\nconst Login: React.FC<IFormProps> = ({ user, setUser, location }) => {\r\n  const formik = useFormik<IBaseValidation>({\r\n    initialValues: {\r\n      username: '',\r\n      password: '',\r\n      error: ''\r\n    },\r\n    validate: (values) => validateBase(values),\r\n    onSubmit: (props, { setSubmitting, setValues }) => {\r\n      const { username, password } = props;\r\n      fetch(SERVER_URL + '/api/signin', {\r\n        method: 'post',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          username,\r\n          password\r\n        })\r\n      })\r\n        .then((r) => r.json())\r\n        .then((data) => {\r\n          if (data.id) {\r\n            setUser({ id: data.id, username: data.username });\r\n          } else if (data.error) {\r\n            setSubmitting(false);\r\n            setValues({ ...props, error: data.error });\r\n          }\r\n        })\r\n        .catch(() => {\r\n          setSubmitting(false);\r\n        });\r\n    }\r\n  });\r\n\r\n  if (user.id) {\r\n    return <Redirect to={{ pathname: `/users/${user.id}`, state: { from: location } }} />;\r\n  }\r\n\r\n  return (\r\n    <Form\r\n      formik={formik}\r\n      headTitle=\"Join your friends!\"\r\n      submitButtonText=\"Login\"\r\n      subTitle={\r\n        <Fragment>\r\n          Don't have an account yet?{' '}\r\n          <Link to=\"/register\">\r\n            <span>Register!</span>\r\n          </Link>\r\n        </Fragment>\r\n      }\r\n      sections={sections}\r\n    />\r\n  );\r\n};\r\n\r\nexport default React.memo(Login);\r\n"],"sourceRoot":""}